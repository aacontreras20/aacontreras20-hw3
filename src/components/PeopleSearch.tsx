import React, { useState, useMemo } from 'react';\nimport { useAppContext } from '../context/AppContext';\nimport './PeopleSearch.css';\n\nconst PeopleSearch: React.FC = () => {\n  const { state, dispatch } = useAppContext();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedPerson, setSelectedPerson] = useState<string | null>(null);\n\n  const searchExamples = [\n    'the VC into climate who likes climbing',\n    'gen AI music person',\n    'Harvard PhD studying bias',\n    'founder working on latency',\n    'researcher interested in ethics'\n  ];\n\n  const filteredPeople = useMemo(() => {\n    if (!searchQuery.trim()) return state.people;\n    \n    const query = searchQuery.toLowerCase();\n    return state.people.filter(person => {\n      return (\n        person.name.toLowerCase().includes(query) ||\n        person.company?.toLowerCase().includes(query) ||\n        person.role?.toLowerCase().includes(query) ||\n        person.vibes.toLowerCase().includes(query) ||\n        person.tags.some(tag => tag.toLowerCase().includes(query)) ||\n        person.notes.some(note => note.toLowerCase().includes(query))\n      );\n    });\n  }, [searchQuery, state.people]);\n\n  const handleExampleClick = (example: string) => {\n    setSearchQuery(example);\n  };\n\n  const getPersonMeetings = (personId: string) => {\n    return state.meetings.filter(meeting => \n      meeting.attendees.includes(personId)\n    );\n  };\n\n  const selectedPersonData = selectedPerson \n    ? state.people.find(p => p.id === selectedPerson)\n    : null;\n\n  return (\n    <div className=\"people-search\">\n      <div className=\"search-header\">\n        <h2>üîç People Search</h2>\n        <p className=\"search-subtitle\">\n          Find people using \"vibes\" - natural language descriptions of who you're looking for\n        </p>\n      </div>\n\n      <div className=\"search-container\">\n        <div className=\"search-input-container\">\n          <input\n            type=\"text\"\n            className=\"search-input\"\n            placeholder=\"Try: 'the VC into climate who likes climbing' or 'gen AI music person'\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n          {searchQuery && (\n            <button \n              className=\"clear-search\"\n              onClick={() => setSearchQuery('')}\n            >\n              ‚úï\n            </button>\n          )}\n        </div>\n\n        <div className=\"search-examples\">\n          <span className=\"examples-label\">Try these examples:</span>\n          {searchExamples.map((example, index) => (\n            <button\n              key={index}\n              className=\"example-chip\"\n              onClick={() => handleExampleClick(example)}\n            >\n              {example}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"search-results\">\n        <div className=\"results-list\">\n          <div className=\"results-header\">\n            <h3>\n              {searchQuery \n                ? `Found ${filteredPeople.length} ${filteredPeople.length === 1 ? 'person' : 'people'}`\n                : `All People (${state.people.length})`\n              }\n            </h3>\n            {searchQuery && (\n              <div className=\"search-confidence\">\n                <span className=\"confidence-badge high\">\n                  {filteredPeople.length > 0 ? '‚úì High confidence' : '‚ö†Ô∏è No matches'}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"people-grid\">\n            {filteredPeople.map(person => (\n              <div \n                key={person.id} \n                className={`person-card ${selectedPerson === person.id ? 'selected' : ''}`}\n                onClick={() => setSelectedPerson(person.id)}\n              >\n                <div className=\"person-header\">\n                  <div className=\"person-avatar\">\n                    {person.name.split(' ').map(n => n[0]).join('')}\n                  </div>\n                  <div className=\"person-basic-info\">\n                    <h4>{person.name}</h4>\n                    <p>{person.company} ‚Ä¢ {person.role}</p>\n                  </div>\n                  <div className=\"meeting-count\">\n                    {person.meetingCount} meetings\n                  </div>\n                </div>\n                \n                <div className=\"person-vibes\">\n                  <strong>Vibes:</strong> {person.vibes}\n                </div>\n                \n                <div className=\"person-tags\">\n                  {person.tags.map(tag => (\n                    <span key={tag} className=\"tag\">{tag}</span>\n                  ))}\n                </div>\n                \n                <div className=\"last-meeting\">\n                  Last met: {person.lastMeeting?.toLocaleDateString() || 'Never'}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {selectedPersonData && (\n          <div className=\"person-details\">\n            <div className=\"details-header\">\n              <h3>üìã {selectedPersonData.name}</h3>\n              <button \n                className=\"close-details\"\n                onClick={() => setSelectedPerson(null)}\n              >\n                ‚úï\n              </button>\n            </div>\n            \n            <div className=\"details-content\">\n              <div className=\"detail-section\">\n                <h4>Basic Info</h4>\n                <div className=\"info-grid\">\n                  <div className=\"info-item\">\n                    <span className=\"info-label\">Company:</span>\n                    <span>{selectedPersonData.company}</span>\n                  </div>\n                  <div className=\"info-item\">\n                    <span className=\"info-label\">Role:</span>\n                    <span>{selectedPersonData.role}</span>\n                  </div>\n                  <div className=\"info-item\">\n                    <span className=\"info-label\">Email:</span>\n                    <span>{selectedPersonData.email}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"detail-section\">\n                <h4>Meeting History</h4>\n                <div className=\"meeting-stats\">\n                  <div className=\"stat\">\n                    <span className=\"stat-number\">{selectedPersonData.meetingCount}</span>\n                    <span className=\"stat-label\">Total Meetings</span>\n                  </div>\n                  <div className=\"stat\">\n                    <span className=\"stat-number\">\n                      {selectedPersonData.lastMeeting \n                        ? Math.floor((new Date().getTime() - selectedPersonData.lastMeeting.getTime()) / (1000 * 60 * 60 * 24))\n                        : 'N/A'\n                      }\n                    </span>\n                    <span className=\"stat-label\">Days Since Last Meeting</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"detail-section\">\n                <h4>Notes & Context</h4>\n                <div className=\"notes-list\">\n                  {selectedPersonData.notes.map((note, index) => (\n                    <div key={index} className=\"note-item\">\n                      ‚Ä¢ {note}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"detail-section\">\n                <h4>Vibes & Personality</h4>\n                <div className=\"vibes-description\">\n                  {selectedPersonData.vibes}\n                </div>\n              </div>\n\n              <div className=\"detail-actions\">\n                <button \n                  className=\"action-btn primary\"\n                  onClick={() => alert('Email integration not implemented - would open email to ' + selectedPersonData.email)}\n                >\n                  üìß Send Email\n                </button>\n                <button \n                  className=\"action-btn secondary\"\n                  onClick={() => alert('Calendar integration not implemented - would schedule meeting')}\n                >\n                  üìÖ Schedule Meeting\n                </button>\n                <button className=\"action-btn secondary\">\n                  üìù Add Note\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {searchQuery && filteredPeople.length === 0 && (\n        <div className=\"no-results\">\n          <div className=\"no-results-content\">\n            <h3>ü§î No matches found</h3>\n            <p>Try a different search term or browse all people above.</p>\n            <div className=\"search-tips\">\n              <h4>Search tips:</h4>\n              <ul>\n                <li>Use natural language: \"the person who...\"</li>\n                <li>Try company names, roles, or interests</li>\n                <li>Search by personality traits or \"vibes\"</li>\n                <li>Use tags like \"AI\", \"founder\", \"research\"</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PeopleSearch;"